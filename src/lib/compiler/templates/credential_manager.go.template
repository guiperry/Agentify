package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"os"
	"path/filepath"
	"sync"
)

// CredentialType represents the type of credential
type CredentialType string

const (
	APIKeyCredential     CredentialType = "api_key"
	UsernameCredential   CredentialType = "username"
	PasswordCredential   CredentialType = "password"
	TokenCredential      CredentialType = "token"
	CertificateCredential CredentialType = "certificate"
	CustomCredential     CredentialType = "custom"
)

// CredentialSource represents where the credential is stored
type CredentialSource string

const (
	EnvVarSource    CredentialSource = "env_var"
	FileSource      CredentialSource = "file"
	KeychainSource  CredentialSource = "keychain"
	ConfigSource    CredentialSource = "config"
	PromptSource    CredentialSource = "prompt"
)

// Credential represents a credential needed by the agent
type Credential struct {
	Name        string           `json:"name"`
	Description string           `json:"description"`
	Type        CredentialType   `json:"type"`
	Source      CredentialSource `json:"source"`
	SourceValue string           `json:"source_value"` // Environment variable name, file path, etc.
	Optional    bool             `json:"optional"`
	Value       string           `json:"-"` // The actual credential value, not serialized
}

// CredentialManager manages credentials for the agent
type CredentialManager struct {
	credentials map[string]*Credential
	configPath  string
	mutex       sync.RWMutex
}

// NewCredentialManager creates a new credential manager
func NewCredentialManager(configPath string) (*CredentialManager, error) {
	manager := &CredentialManager{
		credentials: make(map[string]*Credential),
		configPath:  configPath,
	}
	
	// Create the config directory if it doesn't exist
	configDir := filepath.Dir(configPath)
	if err := os.MkdirAll(configDir, 0755); err != nil {
		return nil, fmt.Errorf("failed to create config directory: %v", err)
	}
	
	// Load credentials from config file if it exists
	if _, err := os.Stat(configPath); err == nil {
		if err := manager.loadCredentials(); err != nil {
			return nil, fmt.Errorf("failed to load credentials: %v", err)
		}
	}
	
	return manager, nil
}

// loadCredentials loads credentials from the config file
func (m *CredentialManager) loadCredentials() error {
	m.mutex.Lock()
	defer m.mutex.Unlock()
	
	data, err := os.ReadFile(m.configPath)
	if err != nil {
		return fmt.Errorf("failed to read config file: %v", err)
	}
	
	var credentials []*Credential
	if err := json.Unmarshal(data, &credentials); err != nil {
		return fmt.Errorf("failed to parse config file: %v", err)
	}
	
	// Store credentials in map
	for _, cred := range credentials {
		m.credentials[cred.Name] = cred
		
		// Load credential value based on source
		if err := m.loadCredentialValue(cred); err != nil {
			fmt.Printf("Warning: Failed to load credential %s: %v\n", cred.Name, err)
		}
	}
	
	return nil
}

// loadCredentialValue loads the actual value of a credential based on its source
func (m *CredentialManager) loadCredentialValue(cred *Credential) error {
	switch cred.Source {
	case EnvVarSource:
		// Load from environment variable
		value := os.Getenv(cred.SourceValue)
		if value == "" && !cred.Optional {
			return fmt.Errorf("required environment variable %s not set", cred.SourceValue)
		}
		cred.Value = value
		
	case FileSource:
		// Load from file
		data, err := os.ReadFile(cred.SourceValue)
		if err != nil {
			if !cred.Optional {
				return fmt.Errorf("failed to read credential file %s: %v", cred.SourceValue, err)
			}
			return nil
		}
		cred.Value = string(data)
		
	case ConfigSource:
		// Value is already set in the config
		// No need to do anything
		
	case PromptSource:
		// Will be prompted for at runtime
		// No need to do anything now
		
	default:
		return fmt.Errorf("unsupported credential source: %s", cred.Source)
	}
	
	return nil
}

// saveCredentials saves credentials to the config file
func (m *CredentialManager) saveCredentials() error {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	
	// Convert map to slice
	credentials := make([]*Credential, 0, len(m.credentials))
	for _, cred := range m.credentials {
		// Create a copy without the Value field
		credCopy := *cred
		credCopy.Value = "" // Don't save the actual value
		credentials = append(credentials, &credCopy)
	}
	
	// Marshal to JSON
	data, err := json.MarshalIndent(credentials, "", "  ")
	if err != nil {
		return fmt.Errorf("failed to marshal credentials: %v", err)
	}
	
	// Write to file
	if err := os.WriteFile(m.configPath, data, 0600); err != nil {
		return fmt.Errorf("failed to write config file: %v", err)
	}
	
	return nil
}

// AddCredential adds a credential to the manager
func (m *CredentialManager) AddCredential(cred *Credential) error {
	m.mutex.Lock()
	defer m.mutex.Unlock()
	
	// Validate credential
	if cred.Name == "" {
		return errors.New("credential name is required")
	}
	if cred.Type == "" {
		return errors.New("credential type is required")
	}
	if cred.Source == "" {
		return errors.New("credential source is required")
	}
	if cred.SourceValue == "" && cred.Source != PromptSource {
		return errors.New("credential source value is required")
	}
	
	// Load credential value
	if err := m.loadCredentialValue(cred); err != nil && !cred.Optional {
		return err
	}
	
	// Store credential
	m.credentials[cred.Name] = cred
	
	// Save credentials to config file
	return m.saveCredentials()
}

// GetCredential gets a credential by name
func (m *CredentialManager) GetCredential(name string) (*Credential, error) {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	
	cred, ok := m.credentials[name]
	if !ok {
		return nil, fmt.Errorf("credential %s not found", name)
	}
	
	return cred, nil
}

// GetCredentialValue gets the value of a credential by name
func (m *CredentialManager) GetCredentialValue(name string) (string, error) {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	
	cred, ok := m.credentials[name]
	if !ok {
		return "", fmt.Errorf("credential %s not found", name)
	}
	
	if cred.Value == "" && !cred.Optional {
		return "", fmt.Errorf("credential %s has no value", name)
	}
	
	return cred.Value, nil
}

// RemoveCredential removes a credential by name
func (m *CredentialManager) RemoveCredential(name string) error {
	m.mutex.Lock()
	defer m.mutex.Unlock()
	
	if _, ok := m.credentials[name]; !ok {
		return fmt.Errorf("credential %s not found", name)
	}
	
	delete(m.credentials, name)
	
	// Save credentials to config file
	return m.saveCredentials()
}

// ListCredentials lists all credentials
func (m *CredentialManager) ListCredentials() []*Credential {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	
	credentials := make([]*Credential, 0, len(m.credentials))
	for _, cred := range m.credentials {
		// Create a copy without the Value field
		credCopy := *cred
		credCopy.Value = "" // Don't expose the actual value
		credentials = append(credentials, &credCopy)
	}
	
	return credentials
}

// ValidateCredentials validates all required credentials
func (m *CredentialManager) ValidateCredentials() error {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	
	var missingCredentials []string
	
	for name, cred := range m.credentials {
		if !cred.Optional && cred.Value == "" {
			missingCredentials = append(missingCredentials, name)
		}
	}
	
	if len(missingCredentials) > 0 {
		return fmt.Errorf("missing required credentials: %v", missingCredentials)
	}
	
	return nil
}

// TestCredential tests a credential against a service
func (m *CredentialManager) TestCredential(name string, testFunc func(string) error) error {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	
	cred, ok := m.credentials[name]
	if !ok {
		return fmt.Errorf("credential %s not found", name)
	}
	
	if cred.Value == "" {
		return fmt.Errorf("credential %s has no value", name)
	}
	
	return testFunc(cred.Value)
}

// PromptForCredential prompts the user for a credential value
func (m *CredentialManager) PromptForCredential(name string) error {
	m.mutex.Lock()
	defer m.mutex.Unlock()
	
	cred, ok := m.credentials[name]
	if !ok {
		return fmt.Errorf("credential %s not found", name)
	}
	
	// This is a placeholder for a real implementation
	// In a real implementation, this would prompt the user for the credential
	fmt.Printf("Please enter the value for %s (%s): ", name, cred.Description)
	var value string
	fmt.Scanln(&value)
	
	cred.Value = value
	
	return nil
}

// PromptForMissingCredentials prompts the user for all missing required credentials
func (m *CredentialManager) PromptForMissingCredentials() error {
	m.mutex.Lock()
	defer m.mutex.Unlock()
	
	for name, cred := range m.credentials {
		if !cred.Optional && cred.Value == "" {
			fmt.Printf("Please enter the value for %s (%s): ", name, cred.Description)
			var value string
			fmt.Scanln(&value)
			
			cred.Value = value
		}
	}
	
	return nil
}